<연산자>

=    | 대입                      | 변수나 상수에 값을 대입함. 변수는 변수끼리 대입할 수 있음.
:=   | 변수 선언 및 대입            | 변수를 선언하는 동시에 값을 대입함.
+    | 덧셈                      | 두 값을 더함. 사용할 수 있는 자료형은 정수, 실수, 복소수, 문자열임.
-    | 뺄셈                      | 두 값을 뺌. 사용할 수 있는 자료형은 정수, 실수, 복소수임.
*    | 곱셈                      | 두 값을 곱함. 사용할 수 있는 자료형은 정수, 실수, 복소수임.
/    | 나눗셈                     | 두 값을 나눔. 사용할 수 있는 자료형은 정수, 실수, 복소수임.
%    | 나머지                     | 두 값을 나눈 뒤 나머지를 구함. 사용할 수 있는 자료형은 정수임.
+=   | 덧셈 후 대입                | 현재 변수와 값을 더한 다음 다시 변수에 대입함. 문자열은 현재 변수에 문자열을 붙인 다음 다시 변수에 대입함.
-=   | 뺄셈 후 대입                | 현재 변수에서 값을 뺀 다음 다시 변수에 대입함.
*=   | 곱셈 후 대입                | 현재 변수와 값을 곱한 다음 다시 변수에 대입함.
/=   |  나눗셈 후 대입             | 현재 변수를 값으로 나눈 당므 다시 변수에 대입함.
%=   | 나머지를 구한 후 대입         | 현재 변수와 값의 나머지를 구한 다음 다시 변수에 대입함.
&    | AND 비트 연산              | 두 값을 비트 단위로 AND 연산을 함. 사용할 수 있는 자료형은 정수형.
|    | OR 비트 연산               | 두 값을 비트 단위로 OR 연산을 함. 사용할 수 있는 자료형은 정수형.
^    | XOR 비트 연산(다항)         | 두 값을 비트 단위로 XOR 연산을 함. 사용할 수 있는 자료형은 정수형.
&^   | AND NOT 연산              | 두 값을 비트 단위로 AND NOT 연산을 함.
&=   | AND 비트 연산 후 대입        | 현재 변수를 값으로 AND 연산한 다음 다시 변수에 대입함.
!=   | OR 비트 연산 후 대입         | 현재 변수를 값으로 OR 연산한 다음 다시 변수에 대입함.
^=   | XOR 비트 연산 후 대입        | 현재 변수를 값으로 XOR 연산한 다음 다시 변수에 대입함.
&^=  | AND NOT 비트 연산 후 대입    | 현재 변수를 값으로 AND NOT 연산을 한 다음 다시 변수에 대입함. 이 연산자는 특정 플래그를 끌 때 주로 사용함.
<<   | 비트를 왼쪽으로 이동          | 현재 값의 비트를 특정 횟수만큼 왼쪽으로 이동함. 사용할 수 있는 자료형은 정수형.
>>   | 비트를 오른쪽으로 이동         | 현재 값의 비트를 특정 횟수만큼 오른쪽으로 이동함. 사용할 수 있는 자료형은 정수형.
<<=  | 비트를 왼쪽으로 이동 후 대입    | 현재 변수를 특정 횟수만큼 왼쪽으로 이동한 다음 다시 변수에 대입함.
>>=  | 비트를 오른쪽으로 이동 후 대입  | 현재 변수를 특정 횟수만큼 오른쪽으로 이동한 다음 다시 변수에 대입함.
^    | 비트 반전(단항)             | 비트를 반전시킴. 즉 0은 1로, 1은 0으로 바꿈.
+    | 양수 부호(단항)             | 값에 양수 부호를 붙임.
-    | 음수 부호(단항)             | 값에 음수 부호를 붙임.
==   | 같다                      | 두 값이 같은지 비교함. 1) 실수형은 값을 계산한 뒤에는 오차가 발생하므로 ==로 비교할 때 주의해야 함. 2) 문자열은 내용이 같은지 비교함. 3) 배열은 요소의 내용이 모두 같은지 비교함.
                                  4) 슬라이스와 맵은 배열과 달리 내용을 비교할 수 없고, 메모리에 할당되어 있는지 확인함. 5) 포인터는 주소가 같은지 비교함.
!=   | 같지 않다                  | 두 값이 다른지 비교함.
<    | 작다                      | 앞의 값이 작은지 비교함. 문자열은 ASCII 코드 값을 기준으로 판단함. 또한, 첫 글자가 같다면 그 다음 글자부터 차례대로 비교하여 최종 값을 구함.
<=   | 작거나 같다                 | 앞의 값이 작거나 같은지 비교함.
>    | 크다                      | 앞의 값이 큰지 비교함.
>=   | 크거나 같다                 | 앞의 값이 커가나 같은지 비교함.
&&   | AND 논리 연산              | 두 불 값이 모두 참인지 확인함.
||   | OR 논리 연산               | 두 불 값 중 한 개라도 참인지 확인함.
!    | NOT 논리 연산              | 불값을 반대로 연산함.
&    | 참조(레퍼런스) 연산          | 현재 변수의 메모리 주소를 구함.
*    | 역참조 연산                | 현재 포인터 변수에 저장된 메모리에 접근하여 값을 가져오거나 저장함.
<-   | 채널 수신 연산              | 채널에 값을 가져옴.
++   | 증가                      | 변수의 값을 1 증가시킴. 사용할 수 있는 자료형은 정수, 실수, 복소수임. Go 언에에서는 ++ 연산자를 사용한 뒤 값을 대입할 수 없고, 변수 뒤에서만 사용할 수 있음. 따라서 ++ 연산자는 단독으로 사용하거나
                                  if 조건문, for 반복문 안에서 주로 사용함.
--   | 감소                      | 변수의 값을 1 감소시킴. 사용할 수 있는 자료형은 정수, 실수, 복소수임. Go 언어에서는 -- 연산자를 사용한 뒤 값을 대입할 수 없고, 변수 뒤에서만 사용할 수 있음. 따라서 -- 연산자는 단독으로 사용하거나
                                  if 조건문, for 반복문 안에서 주로 사용함.

<연산자 우선순위>

1 | ||
2 | &&
3 | == != < <= > >=
4 | + - | ^
5 | * / % << >> & &^
